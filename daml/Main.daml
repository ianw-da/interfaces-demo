-- Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Main where

import Daml.Script
import DA.Assert
import DA.Foldable

-- See https://discuss.daml.com/t/example-of-a-daml-interface-step-by-step/5793

-- For the demo the IThing interface is empty
-- Thing interface definition
interface IThing where
  viewtype ThingInterfaceView

data ThingInterfaceView = ThingInterfaceView {}

-- Animal interface definition
interface IAnimal requires IThing where
  -- Interface must define a view 6type. This is a special method containing the fields
  -- that are common to all of our implementations of the interface.
  viewtype AnimalInterfaceView

  -- Interface method. All templates that implement this interface must provide
  -- implementations of this method.
  -- Note to assign a name we define a function here that is used
  -- in the choice below.
  assignName : Text -> IAnimal

  -- Define a choice on the interface that solely uses the view.
  -- Interface choices are implemented on the interface not on the templates.
  nonconsuming choice GreetMe : Text
    controller (view this).owner
    do
      pure $ (view this).sound

  -- Functions can be 'fed in' to the interface choice implementation.
  choice AssignName : ContractId IAnimal
    with newName : Text
    controller (view this).owner
    do
      -- When assignName is used in a choice an extra parameter is added which has the
      -- interface type. Here we pass in 'this'.
      create (assignName this newName)

data AnimalInterfaceView = AnimalInterfaceView with
  owner : Party
  description : Text
  sound : Text

-- Template definition of a Cat, which implements the Animal interface
template Cat
  with
    catowner : Party
    catName : Text
  where
    signatory catowner

    -- How the IAnimal interface is implemented by the Cat template.
    -- This block can be here or inside the interface definition.
    interface instance IAnimal for Cat where
      -- All interface instances must implement a special view method which returns a value
      -- of the type declared by viewtype
      view = AnimalInterfaceView with
      -- The implementations of the Interface methods
        owner = catowner
        description = "I am a cat"
        sound = "Miaow!"

      assignName petName = toInterface @IAnimal $ this with catName = petName


    -- IAnimal requires IThing
    interface instance IThing for Cat where
      view = ThingInterfaceView {}

-- Template definition of a Dog, which implements the Animal interface
template Dog
  with
    dogowner : Party
    name : Text
  where
    signatory dogowner
    
    interface instance IAnimal for Dog where
      view = AnimalInterfaceView with
        owner = dogowner
        description = "I am a dog"
        sound = "Woof!"
    
      -- Define the assignName function which is used in the interface choice. It has to return an IAnimal
      -- toInterface converts a template value to an interface value 
      assignName petName = toInterface @IAnimal $ this with name = petName

    -- IAnimal requires IThing
    interface instance IThing for Dog where
      view = ThingInterfaceView {}

-- Testing script
setup : Script ()
setup = script do
-- Party setup
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")

  -- Create a cat contract
  catId <- submit alice do
    createCmd Cat with catowner = alice, catName = ""

  -- Create a dog contract
  dogId <- submit alice do
    createCmd Dog with dogowner = alice, name = ""

  -- Get the Animal interface contract Ids for each
  -- toInterfaceContractId converts a template contract id into an interface contract id
  -- toInterfaceContractId : ContractId Cat -> ContractId Animal
  let catAsAnimalId = toInterfaceContractId @IAnimal catId
  let dogAsAnimalId = toInterfaceContractId @IAnimal dogId

  let c : ContractId IAnimal = coerceContractId catId -- don't use not documented

  -- Get the animal view
  Some catAsAnimalInterfaceView <- queryInterfaceContractId alice catAsAnimalId
  debug $ "Description of cat using animal interface view: " <> catAsAnimalInterfaceView.description

  -- Following line fails as catId is a template instance not an interface instance
  ---let animal1Id2 = coerceInterfaceContractId @IAnimal catId

  -- Get the cat id as an IThing id in two possible ways
  let catAsThingId : ContractId IThing = coerceInterfaceContractId catAsAnimalId
  let catAsThingId2 = toInterfaceContractId @IThing catAsAnimalId

  -- check
  catAsThingId === catAsThingId2

  -- Go back the other way
  let catAsAnimalId2 = fromInterfaceContractId @IAnimal catAsThingId
  -- Or can to this using coerceInterfaceContractId
  let catAsAnimalId3 : ContractId IAnimal = coerceInterfaceContractId catAsThingId2
  -- Go back to the cat id
  let catId2 = fromInterfaceContractId @Cat catAsAnimalId2
  -- Can also go directly from IThing id to Cat id
  let catId3 = fromInterfaceContractId @Cat catAsThingId

  -- check
  catId === catId2
  catId === catId3
  catAsAnimalId === catAsAnimalId2
  catAsAnimalId === catAsAnimalId3

  -- Get an IAnimal interface (as opposed to a ContractId IAnimal) for the dog
  -- by first getting the dog contract then using toInterface
  Some dog <- queryContractId alice dogId
  
  let dogAsIAnimal = toInterface @IAnimal dog
  let dogAsIThing = toInterface @IThing dogAsIAnimal
  
  -- Go back the other way
  let Some dogAsIAnimal2 = fromInterface @IAnimal dogAsIThing
  let Some dog2 = fromInterface @Dog dogAsIAnimal
  -- Or go from thing to dog directly
  let Some dog3 = fromInterface @Dog dogAsIThing

  -- check
  dog === dog2
  dog === dog3

  -- Although the types are different the ids are the same
  show catId === show catAsAnimalId

  -- Get them to make their sounds (using the IAnimal interface)
  sound1 <- submit alice do
    exerciseCmd catAsAnimalId GreetMe

  sound2 <- submit alice do
    exerciseCmd dogAsAnimalId GreetMe

  debug sound1
  debug sound2

  -- Give them names using the IAnimal interface
  catAsAnimalId4 <- submit alice do
    exerciseCmd catAsAnimalId AssignName with newName = "Fluffy"
  dogAsAnimalId4 <- submit alice do
    exerciseCmd dogAsAnimalId AssignName with newName = "Gnasher"

  -- New contracts have been created so ids have changed
  assertNotEq catAsAnimalId4 catAsAnimalId

  -- Go back to a Cat contract Id and verify it matches the original one
  -- Note this works even though this contract has now been archived
  let catId4 = fromInterfaceContractId @Cat catAsAnimalId
  catId === catId4

  -- Here is one way to get the new cat contract
  Some cat2 <- queryContractId alice $ fromInterfaceContractId @Cat catAsAnimalId4
  debug $ "Cat with name assigned: " <> show cat2

  -- Query all instances of IAnimal on the ledger
  items <- queryInterface @IAnimal alice
  forA_ items
   (\(ia, Some iv) -> do
     let lineItem = "My owner is " <> show iv.owner <> ". " <> iv.description
     debug lineItem)

  pure ()